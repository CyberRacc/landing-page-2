
## Function Expressions ##

    In JavaScript, a function is not a "magical language structure", but
    a special kind of value.

    The syntax that we used before is called a function declaration:

    function sayHi() {
        alert("Hello");
    }

    There is another syntax for creating a function that is called a function
    expression.

    It allows us to create a new function in the middle of any expression.

    For example:

    let sayHi = function() {
        alert("Hello");
    };

    Here we can see a variable sayHi getting a value, the new function,
    created as function() { alert("Hello"); }.

    As the function creation happens in the context of the assignment
    expression (to the right side of = ), this is a function expression.

    Please note, there's no name after the function keyword. Omitting a
    name is allowed for function expressions.

    Here we immediately assign it to the variable, so the meaning of these
    code samples is the same: "create a function and put it into the
    variable sayHi".

    In more advanced situations, that we'll come across later, a function
    may be created and immediately called or scheduled for a later
    execution, not stored anywhere, thus remaining anonymous.

## Function is a value ##

    Let's reiterate: no matter how the function is created, a function is
    a value. Both examples above store a function in the sayHi variable.

    We can even print out that value using alert:

    function sayHi() {
        alert("Hello");
    }

    alert(sayHi); // shows the function code.

    Please note that the last line does not run the function, because there
    are no brackets after sayHi. There are programming languages where any
    mention of a function name causes its execution, but JavaScript is
    not like that.

    In JavaScript, a function is a value, so we can deal with it as a value.
    The code above shows its string representation, which is the source code.

    Surely, a function is a special value, in the sense that we can call it
    like sayHi().

    But it's still a value. So we can work with it like with other kinds
    of values.

    We can copy a function to another variable:

    function sayHi() { // (1) create
        alert("Hello");
    }

    let func = sayHi; // (2) copy
    
    func(); // Hello    // (3) run the copy (it works)!
    sayHi(); // Hello   //  this still works too (why wouldn't it)

    Here's what happens above in detail:

    1. The function declaration (1) creates the function and puts it
    into the variable named sayHi.
    2. 
