There are four logical operators in JavaScript.

|| (OR), && (AND), ! (NOT), ?? (Nullish Coalescing).

Here we will cover the first three.

Although they are called "logical", they can be apploed to values of any type,
not just boolean. Their result can also be of any type.

## || (OR) ##

The "OR" operator is represented with two vertical line symbols:

result = a || b;

In classical programming, the logical OR is meant to manipulate boolean values only.
If any of its arguments are true, it returns true, otherwise it returns false.

In JavaScript, the operator is a little bit trickier and more powerful.
But first, let's see what happens with boolean values.

There are four possible logical combinations:

alert( true || true );   // true
alert( false || true );  // true
alert( true || false );  // true
alert( false || false ); // false

As we can see, the result is always true, except for the case when both
operands are false.

If an operand is not a boolean, it's converted to a boolean for evaluation.

For instance, the number 1 is treated as true, and the number 0 as false:

if (1 || 0) { // works just like if( true || false )
  alert( 'truthy!' );
}

Most of the time, OR || is used in an if statement to test if any of the given
conditions are true.

For example:

let hour = 9;

if (hour < 10 || hour > 18) {
  alert( 'The office is closed.' );
}

We can pass more conditions:

let hour = 12;
let isWeekend = true;

if (hour < 10 || hour > 18 || isWeekend) {
  alert( 'The office is closed.' ); // it is the weekend
}

## OR "||" finds the first truthy value. ##

The logic described above is somewhat classical.
Now, let's bring in the "extra" features of JavaScript.

The extended algorithm works as follows.

Given multiple OR'ed values:

result = value1 || value2 || value3;

The OR || operator does the following:

 - Evaluates operands from left to right.
 - For each operand, converts it to boolean, if the result is true,
   stops and returns the original value of that operand.
 - If all operands have been evaluated (i.e, all were false), returns the last operand.

A value is returned in its original form, without the conversion.

In other words, a chain of OR || returns the first truthy value
or the last one if no truthy value is found.

For instance:

alert( 1 || 0 ); // 1 (1 is truthy)

alert( null || 1 ); // 1 (1 is the first truthy value)
alert( null || 0 || 1 ); // 1 (the first truthy value)

alert( undefined || null || 0 ); // 0 (all falsy, returns the last value)

This leads to some interesting usage compared to a "puer, classical boolean-only OR".

# Getting the first truthy value from a list of variables or expressions. #

For instance, we have firstName, lastName and nickName variables, all optional (i.e
can be undefined or have falsy values).

Let's use OR || to choose the one that has the data and show it (or "Anonymous" if nothing set):

let firstName = "";
let lastName = "";
let nickName = "SuperCoder";

alert( firstName || lastName || nickName || "Anonymous"); // Result is SuperCoder

If all variables were falsy, "Anonymous" would show up.

The reason "SuperCoder" shows up is because it's the first truthy value in the expression. In JavaScript, an empty string ("") is considered falsy, which is equivalent to false in a boolean context. On the other hand, a non-empty string (like "SuperCoder") is considered truthy, which is equivalent to true in a boolean context.

So when JavaScript evaluates firstName || lastName || nickName || "Anonymous", it goes like this:

    firstName is "", which is falsy, so it moves on to the next value.
    lastName is also "", which is also falsy, so it moves on to the next value.
    nickName is "SuperCoder", which is truthy, so it stops and returns that value.

Therefore, alert( firstName || lastName || nickName || "Anonymous") will alert "SuperCoder". If all the variables were empty strings (which are falsy), it would move all the way to the end and alert "Anonymous".

To summarize, the || operator in JavaScript doesn't
actually convert the values to booleans. Instead,
it checks each value from left to right and returns the first
truthy value it encounters.
If it doesn't find a truthy value, it returns the last value.

